(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{345:function(e,t,n){"use strict";n.r(t);var o=n(0),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"coroutine"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#coroutine"}},[e._v("#")]),e._v(" COROUTINE")]),e._v(" "),n("p",[e._v("Links: "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Coroutine",target:"_blank",rel:"noopener noreferrer"}},[e._v("Coroutine"),n("OutboundLink")],1)]),e._v(" "),n("pre",[n("code",[e._v("Coroutines are computer program components that generalize subroutines for non-preemptive multitasking, by allowing execution to be suspend and resumed.\n")])]),e._v(" "),n("h2",{attrs:{id:"comparison-with-subroutines"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#comparison-with-subroutines"}},[e._v("#")]),e._v(" Comparison with subroutines")]),e._v(" "),n("pre",[n("code",[e._v("Subroutines are special cases of coroutines.\n\nSubroutine:\n    when invoked, execution begins at the start, and finished once exist.\n    an instance of a subroutine only returns once.\n    does not hold state between invocations.\nCoroutine:\n    coroutine can exit by calling other coroutines, which may later return to the point where they were invoked in the original coroutines.\n    from the coroutine's point of view, it is not exiting but calling another coroutine.\n    coroutine instance holds state, and varies between \n    \nAny subroutine can be translated to a coroutine which does not call yield.\n")])]),e._v(" "),n("h2",{attrs:{id:"difference-of-calling-coroutine"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#difference-of-calling-coroutine"}},[e._v("#")]),e._v(" Difference of calling coroutine")]),e._v(" "),n("pre",[n("code",[e._v("yield:\n    symmetric\ncall:\n    caller-callee\n")])]),e._v(" "),n("h2",{attrs:{id:"comparison-with-threads"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#comparison-with-threads"}},[e._v("#")]),e._v(" Comparison with threads")]),e._v(" "),n("pre",[n("code",[e._v("Coroutines are very similar to threads.\ncoroutine:\n    cooperative multitask\n    concurrency not parallelism\n    advantage:\n        hard-realtime context (context switching)\n        no need for synchronisation\n        no need for support from the os\nthread:\n    preemptive multitask\n")])]),e._v(" "),n("h2",{attrs:{id:"comparison-with-generators"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#comparison-with-generators"}},[e._v("#")]),e._v(" Comparison with generators")]),e._v(" "),n("pre",[n("code",[e._v("Generators, also known as semicoroutines, are a subset of coroutines.\ndiff:\n    coroutine:\n        trasfer control back to the caller after the yield\n    generator:\n        (simplify the writing of iterators)\n        pass a value back to a parent routine\n")])])])}),[],!1,null,null,null);t.default=r.exports}}]);